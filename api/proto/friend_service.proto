syntax = "proto3";

package friend;

option go_package = "mutual-friend/pkg/proto";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Friend service definition
service FriendService {
  // Add a friend relationship
  rpc AddFriend(AddFriendRequest) returns (AddFriendResponse);
  
  // Remove a friend relationship
  rpc RemoveFriend(RemoveFriendRequest) returns (RemoveFriendResponse);
  
  // Get friends list with server streaming
  rpc GetFriends(GetFriendsRequest) returns (stream GetFriendsResponse);
  
  // Get friend count
  rpc GetFriendCount(GetFriendCountRequest) returns (GetFriendCountResponse);
  
  // Check if two users are friends
  rpc AreFriends(AreFriendsRequest) returns (AreFriendsResponse);
  
  // Get mutual friends between two users
  rpc GetMutualFriends(GetMutualFriendsRequest) returns (stream GetMutualFriendsResponse);
  
  // Get friend recommendations (will be implemented in later phases)
  rpc GetRecommendations(GetRecommendationsRequest) returns (stream GetRecommendationsResponse);
  
  // Search users
  rpc SearchUsers(SearchUsersRequest) returns (stream SearchUsersResponse);
  
  // Get user suggestions
  rpc GetUserSuggestions(GetUserSuggestionsRequest) returns (stream GetUserSuggestionsResponse);
  
  // Health check
  rpc HealthCheck(google.protobuf.Empty) returns (HealthCheckResponse);
}

// Common message types
message User {
  string user_id = 1;
  string username = 2;
  string email = 3;
  string display_name = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

message Friend {
  string user_id = 1;
  string friend_id = 2;
  google.protobuf.Timestamp created_at = 3;
  User friend_info = 4; // Optional user information
}

message MutualFriend {
  string friend_id = 1;
  User friend_info = 2;
  int32 mutual_count = 3; // Number of mutual connections
}

message Recommendation {
  string user_id = 1;
  User user_info = 2;
  int32 mutual_friend_count = 3;
  double score = 4;
  string reason = 5;
}

// Request/Response messages for AddFriend
message AddFriendRequest {
  string user_id = 1;
  string friend_id = 2;
}

message AddFriendResponse {
  bool success = 1;
  string message = 2;
  Friend friendship = 3;
}

// Request/Response messages for RemoveFriend
message RemoveFriendRequest {
  string user_id = 1;
  string friend_id = 2;
}

message RemoveFriendResponse {
  bool success = 1;
  string message = 2;
}

// Request/Response messages for GetFriends
message GetFriendsRequest {
  string user_id = 1;
  int32 limit = 2; // Default: 50, Max: 100
  string page_token = 3; // For pagination
  bool include_user_info = 4; // Whether to include friend's user info
}

message GetFriendsResponse {
  Friend friend = 1;
  string next_page_token = 2; // Empty if no more results
  int32 total_count = 3; // Total number of friends (only in first response)
}

// Request/Response messages for GetFriendCount
message GetFriendCountRequest {
  string user_id = 1;
}

message GetFriendCountResponse {
  string user_id = 1;
  int32 count = 2;
}

// Request/Response messages for AreFriends
message AreFriendsRequest {
  string user_id = 1;
  string friend_id = 2;
}

message AreFriendsResponse {
  bool are_friends = 1;
  google.protobuf.Timestamp friendship_created_at = 2; // If they are friends
}

// Request/Response messages for GetMutualFriends
message GetMutualFriendsRequest {
  string user_id = 1;
  string other_user_id = 2;
  int32 limit = 3; // Default: 50, Max: 100
  string page_token = 4;
  bool include_user_info = 5;
}

message GetMutualFriendsResponse {
  MutualFriend mutual_friend = 1;
  string next_page_token = 2;
  int32 total_count = 3; // Only in first response
}

// Request/Response messages for GetRecommendations
message GetRecommendationsRequest {
  string user_id = 1;
  int32 limit = 2; // Default: 20, Max: 50
  string page_token = 3;
  double min_score = 4; // Minimum recommendation score
  bool include_user_info = 5;
}

message GetRecommendationsResponse {
  Recommendation recommendation = 1;
  string next_page_token = 2;
  int32 total_count = 3; // Only in first response
}

// Health check response
message HealthCheckResponse {
  string status = 1; // "SERVING" or "NOT_SERVING"
  string message = 2;
  google.protobuf.Timestamp timestamp = 3;
}

// Request/Response messages for SearchUsers
message SearchUsersRequest {
  string query = 1;                    // Search query
  int32 limit = 2;                     // Default: 20, Max: 50
  string page_token = 3;               // For pagination
  SearchFilters filters = 4;           // Advanced filters
  SortOptions sort = 5;                // Sorting options
  bool include_highlights = 6;         // Whether to include search highlights
}

message SearchFilters {
  repeated string locations = 1;        // Filter by location
  repeated string interests = 2;        // Filter by interests
  int32 min_mutual_friends = 3;        // Minimum mutual friend count
  int32 max_mutual_friends = 4;        // Maximum mutual friend count
  bool exclude_friends = 5;            // Exclude existing friends
  bool only_mutual_friends = 6;       // Only show users with mutual friends
  int32 min_friend_count = 7;         // Minimum friend count
  int32 max_friend_count = 8;         // Maximum friend count
}

message SortOptions {
  enum SortField {
    RELEVANCE = 0;
    MUTUAL_FRIENDS = 1;
    CREATED_AT = 2;
    FRIEND_COUNT = 3;
    ACTIVITY_SCORE = 4;
  }
  SortField field = 1;
  bool descending = 2;
}

message SearchUsersResponse {
  UserSearchResult user = 1;
  string next_page_token = 2;          // Empty if no more results
  int32 total_count = 3;               // Total number of results (only in first response)
  SearchMetadata metadata = 4;         // Search metadata (only in first response)
}

message UserSearchResult {
  User user = 1;
  float relevance_score = 2;           // Search relevance score
  int32 mutual_friend_count = 3;       // Number of mutual friends
  repeated string mutual_friend_ids = 4; // IDs of mutual friends (limited)
  string highlight = 5;                // Search result highlighting
  SocialMetrics social_metrics = 6;    // Social metrics for ranking
}

message SocialMetrics {
  int32 friend_count = 1;
  int32 mutual_friend_count = 2;
  float popularity_score = 3;
  float activity_score = 4;
  float response_rate = 5;
}

message SearchMetadata {
  int32 took_ms = 1;                   // Search time in milliseconds
  bool timed_out = 2;                  // Whether search timed out
  string query_explanation = 3;        // Query explanation for debugging
}

// Request/Response messages for GetUserSuggestions
message GetUserSuggestionsRequest {
  string user_id = 1;                  // User requesting suggestions
  int32 limit = 2;                     // Default: 10, Max: 20
  string suggestion_type = 3;          // Type of suggestion (interest_based, mutual_friends, location_based)
  bool include_user_info = 4;          // Whether to include full user info
}

message GetUserSuggestionsResponse {
  UserSuggestion suggestion = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

message UserSuggestion {
  User user = 1;
  float suggestion_score = 2;          // Suggestion relevance score
  string reason = 3;                   // Why this user was suggested
  repeated string shared_interests = 4; // Shared interests
  int32 mutual_friend_count = 5;       // Number of mutual friends
  SocialMetrics social_metrics = 6;    // Social metrics
}

// Error handling
message ErrorDetails {
  string code = 1;
  string message = 2;
  map<string, string> details = 3;
}