// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/friend_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FriendService_AddFriend_FullMethodName          = "/friend.FriendService/AddFriend"
	FriendService_RemoveFriend_FullMethodName       = "/friend.FriendService/RemoveFriend"
	FriendService_GetFriends_FullMethodName         = "/friend.FriendService/GetFriends"
	FriendService_GetFriendCount_FullMethodName     = "/friend.FriendService/GetFriendCount"
	FriendService_AreFriends_FullMethodName         = "/friend.FriendService/AreFriends"
	FriendService_GetMutualFriends_FullMethodName   = "/friend.FriendService/GetMutualFriends"
	FriendService_GetRecommendations_FullMethodName = "/friend.FriendService/GetRecommendations"
	FriendService_HealthCheck_FullMethodName        = "/friend.FriendService/HealthCheck"
)

// FriendServiceClient is the client API for FriendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Friend service definition
type FriendServiceClient interface {
	// Add a friend relationship
	AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*AddFriendResponse, error)
	// Remove a friend relationship
	RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...grpc.CallOption) (*RemoveFriendResponse, error)
	// Get friends list with server streaming
	GetFriends(ctx context.Context, in *GetFriendsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFriendsResponse], error)
	// Get friend count
	GetFriendCount(ctx context.Context, in *GetFriendCountRequest, opts ...grpc.CallOption) (*GetFriendCountResponse, error)
	// Check if two users are friends
	AreFriends(ctx context.Context, in *AreFriendsRequest, opts ...grpc.CallOption) (*AreFriendsResponse, error)
	// Get mutual friends between two users
	GetMutualFriends(ctx context.Context, in *GetMutualFriendsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMutualFriendsResponse], error)
	// Get friend recommendations (will be implemented in later phases)
	GetRecommendations(ctx context.Context, in *GetRecommendationsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetRecommendationsResponse], error)
	// Health check
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type friendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendServiceClient(cc grpc.ClientConnInterface) FriendServiceClient {
	return &friendServiceClient{cc}
}

func (c *friendServiceClient) AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*AddFriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFriendResponse)
	err := c.cc.Invoke(ctx, FriendService_AddFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...grpc.CallOption) (*RemoveFriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFriendResponse)
	err := c.cc.Invoke(ctx, FriendService_RemoveFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) GetFriends(ctx context.Context, in *GetFriendsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFriendsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FriendService_ServiceDesc.Streams[0], FriendService_GetFriends_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetFriendsRequest, GetFriendsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FriendService_GetFriendsClient = grpc.ServerStreamingClient[GetFriendsResponse]

func (c *friendServiceClient) GetFriendCount(ctx context.Context, in *GetFriendCountRequest, opts ...grpc.CallOption) (*GetFriendCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendCountResponse)
	err := c.cc.Invoke(ctx, FriendService_GetFriendCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) AreFriends(ctx context.Context, in *AreFriendsRequest, opts ...grpc.CallOption) (*AreFriendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AreFriendsResponse)
	err := c.cc.Invoke(ctx, FriendService_AreFriends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) GetMutualFriends(ctx context.Context, in *GetMutualFriendsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMutualFriendsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FriendService_ServiceDesc.Streams[1], FriendService_GetMutualFriends_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetMutualFriendsRequest, GetMutualFriendsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FriendService_GetMutualFriendsClient = grpc.ServerStreamingClient[GetMutualFriendsResponse]

func (c *friendServiceClient) GetRecommendations(ctx context.Context, in *GetRecommendationsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetRecommendationsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FriendService_ServiceDesc.Streams[2], FriendService_GetRecommendations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetRecommendationsRequest, GetRecommendationsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FriendService_GetRecommendationsClient = grpc.ServerStreamingClient[GetRecommendationsResponse]

func (c *friendServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, FriendService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendServiceServer is the server API for FriendService service.
// All implementations must embed UnimplementedFriendServiceServer
// for forward compatibility.
//
// Friend service definition
type FriendServiceServer interface {
	// Add a friend relationship
	AddFriend(context.Context, *AddFriendRequest) (*AddFriendResponse, error)
	// Remove a friend relationship
	RemoveFriend(context.Context, *RemoveFriendRequest) (*RemoveFriendResponse, error)
	// Get friends list with server streaming
	GetFriends(*GetFriendsRequest, grpc.ServerStreamingServer[GetFriendsResponse]) error
	// Get friend count
	GetFriendCount(context.Context, *GetFriendCountRequest) (*GetFriendCountResponse, error)
	// Check if two users are friends
	AreFriends(context.Context, *AreFriendsRequest) (*AreFriendsResponse, error)
	// Get mutual friends between two users
	GetMutualFriends(*GetMutualFriendsRequest, grpc.ServerStreamingServer[GetMutualFriendsResponse]) error
	// Get friend recommendations (will be implemented in later phases)
	GetRecommendations(*GetRecommendationsRequest, grpc.ServerStreamingServer[GetRecommendationsResponse]) error
	// Health check
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	mustEmbedUnimplementedFriendServiceServer()
}

// UnimplementedFriendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFriendServiceServer struct{}

func (UnimplementedFriendServiceServer) AddFriend(context.Context, *AddFriendRequest) (*AddFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (UnimplementedFriendServiceServer) RemoveFriend(context.Context, *RemoveFriendRequest) (*RemoveFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFriend not implemented")
}
func (UnimplementedFriendServiceServer) GetFriends(*GetFriendsRequest, grpc.ServerStreamingServer[GetFriendsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetFriends not implemented")
}
func (UnimplementedFriendServiceServer) GetFriendCount(context.Context, *GetFriendCountRequest) (*GetFriendCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendCount not implemented")
}
func (UnimplementedFriendServiceServer) AreFriends(context.Context, *AreFriendsRequest) (*AreFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreFriends not implemented")
}
func (UnimplementedFriendServiceServer) GetMutualFriends(*GetMutualFriendsRequest, grpc.ServerStreamingServer[GetMutualFriendsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetMutualFriends not implemented")
}
func (UnimplementedFriendServiceServer) GetRecommendations(*GetRecommendationsRequest, grpc.ServerStreamingServer[GetRecommendationsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetRecommendations not implemented")
}
func (UnimplementedFriendServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedFriendServiceServer) mustEmbedUnimplementedFriendServiceServer() {}
func (UnimplementedFriendServiceServer) testEmbeddedByValue()                       {}

// UnsafeFriendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendServiceServer will
// result in compilation errors.
type UnsafeFriendServiceServer interface {
	mustEmbedUnimplementedFriendServiceServer()
}

func RegisterFriendServiceServer(s grpc.ServiceRegistrar, srv FriendServiceServer) {
	// If the following call pancis, it indicates UnimplementedFriendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FriendService_ServiceDesc, srv)
}

func _FriendService_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_AddFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).AddFriend(ctx, req.(*AddFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_RemoveFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).RemoveFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_RemoveFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).RemoveFriend(ctx, req.(*RemoveFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_GetFriends_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFriendsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FriendServiceServer).GetFriends(m, &grpc.GenericServerStream[GetFriendsRequest, GetFriendsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FriendService_GetFriendsServer = grpc.ServerStreamingServer[GetFriendsResponse]

func _FriendService_GetFriendCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).GetFriendCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_GetFriendCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).GetFriendCount(ctx, req.(*GetFriendCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_AreFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).AreFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_AreFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).AreFriends(ctx, req.(*AreFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_GetMutualFriends_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMutualFriendsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FriendServiceServer).GetMutualFriends(m, &grpc.GenericServerStream[GetMutualFriendsRequest, GetMutualFriendsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FriendService_GetMutualFriendsServer = grpc.ServerStreamingServer[GetMutualFriendsResponse]

func _FriendService_GetRecommendations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRecommendationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FriendServiceServer).GetRecommendations(m, &grpc.GenericServerStream[GetRecommendationsRequest, GetRecommendationsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FriendService_GetRecommendationsServer = grpc.ServerStreamingServer[GetRecommendationsResponse]

func _FriendService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendService_ServiceDesc is the grpc.ServiceDesc for FriendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "friend.FriendService",
	HandlerType: (*FriendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFriend",
			Handler:    _FriendService_AddFriend_Handler,
		},
		{
			MethodName: "RemoveFriend",
			Handler:    _FriendService_RemoveFriend_Handler,
		},
		{
			MethodName: "GetFriendCount",
			Handler:    _FriendService_GetFriendCount_Handler,
		},
		{
			MethodName: "AreFriends",
			Handler:    _FriendService_AreFriends_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _FriendService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFriends",
			Handler:       _FriendService_GetFriends_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMutualFriends",
			Handler:       _FriendService_GetMutualFriends_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRecommendations",
			Handler:       _FriendService_GetRecommendations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/friend_service.proto",
}
